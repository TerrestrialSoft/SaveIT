<div class="m-2 min-size-content">
    <div class="d-flex align-items-center mb-3">
        <div class="me-4">
            <Button Color="ButtonColor.Secondary" Outline="true" @onclick="ChangeToParentDirectory" Disabled="@(_isLoading || _showingDrives)">
                <Icon Name="IconName.ArrowUp" />
            </Button>
        </div>
        <div class="flex-grow-1">
            @if(!_showingDrives)
            {
                <EditForm Model="_localFilePathModel" autocomplete="off">
                    <InputText @bind-Value="_localFilePathModel.Path"
                               @onkeydown="OnPathKeyPressed"
                               @oninput="@(e => _localFilePathModel.Path = e.Value?.ToString()!)"
                               @onfocusout="UpdateSelectedPath"
                               Class="fs-5 w-100" />
                </EditForm>
            }
        </div>
    </div>

    @if (_error is not null)
    {
        <div>
            <Alert Color="AlertColor.Warning">@_error</Alert>
        </div>
    }
    else if (_information is not null)
    {
        <div>
            <Alert Color="AlertColor.Info">@_information</Alert>
        </div>
    }

    @if (_isLoading)
    {
        <div class="d-flex justify-content-center">
            <Spinner Size="SpinnerSize.Large" Style=" width: 6rem; height: 6rem;" />
        </div>
    }
    else
    {
        <div class="d-flex flex-wrap" autofocus>
            @foreach (var item in _items)
            {
                <Tooltip Title="@item.Item.Name">
                    @if (item.Item.IsDirectory || item.Item.IsDrive)
                    {
                        <div class="d-flex flex-column align-items-center @(item.IsSelected ? "selected-item" : "") m-2 item"
                             @ondblclick="() => MoveToDirectory(item)"
                             @onclick="() => SelectItem(item)">
                            <img src="@(item.Item.IsDirectory
                                    ? "img/icons/folder-icon.svg"
                                    : "img/icons/drive-icon.svg")"
                                alt="@item.Item.Name"
                                class="item-img" />
                            <p class="item-name">@item.Item.Name</p>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex flex-column align-items-center m-2 @(item.IsSelected ? "selected-item" : "") item"
                             @onclick="() => SelectItem(item)"
                             @ondblclick="() => SelectAndPickAsync(item)">
                            <img src="img/icons/file-icon.svg" alt="@item.Item.Name" class="item-img" />
                            <p class="item-name">@item.Item.Name</p>
                        </div>
                    }
                </Tooltip>
            }
        </div>
    }

    <div class="d-flex mt-3 justify-content-end">
        @if(AllowedExtensions.Any())
        {
            <div class="me-5">
                <b>Allowed extensions:</b><br />
                @string.Join(", ", AllowedExtensions)
            </div>
        }
        <Button Color="ButtonColor.Primary"
            @onclick="PickItemAsync"
            Class="fs-5 p-2 pe-3 ps-3"
            Disabled="@CanPickItem()">
            Select
        </Button>
    </div>
</div>
