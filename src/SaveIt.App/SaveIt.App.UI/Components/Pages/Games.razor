@page "/"
@page "/games"
@using SaveIt.App.Domain.Repositories
@using SaveIt.App.Domain.Entities
@inject IGameRepository gameRepository
@inject IStorageAccountRepository storageAccountRepository

<div class="d-flex m-3 justify-content-center">
    <SearchBar OnSearch="UpdateGames" />
    <Button Color="ButtonColor.Primary" Size="Size.Large" Class="p-2 ms-5" @onclick="ShowCreateNewGameModal">
        <Icon Name="IconName.PlusLg" /> Create new Game
    </Button>
</div>

<div class="d-flex flex-wrap">
    @foreach (var game in _filteredGames)
    {
        <GameCard Game="game" ShowDetail="game == _selectedGame" OnCardClicked="GameCardClicked" />
    }
</div>

<Modal @ref="_createNewGameModal" Title="Modal title" Size="ModalSize.ExtraLarge">
    <BodyTemplate>
        <EditForm Model="_selectedGame">
            <div class="d-flex">
                <div>
                    <div>
                        <label>
                            Game Name
                            <InputText @bind-Value="_selectedGame.Name" />
                        </label>
                    </div>
                    <div>
                        <label>
                            Username
                            <InputText @bind-Value="_selectedGame.Name" />
                        </label>
                    </div>
                </div>
                <div>
                    <div>
                        <ImagePicker />
                    </div>
                    <div>
                    
                    </div>
                </div>
            </div>
            
            <h3>Game Save Information</h3>

            <div class="d-flex">
                <div>
                    <div>
                        <label>
                            Game Save Name
                            <InputText @bind-Value="_selectedGame.Name" />
                        </label>
                    </div>
                    <div>
                        <label>
                            Storage Account
                            <InputSelect @bind-Value="_selectedStorageAccount">
                                @foreach(var account in _storageAccounts)
                                {
                                    <option value="@account">@account.Name</option>
                                }
                            </InputSelect>
                        </label>
                    </div>
                </div>
                <div>
                    <div>
                        <LocalFolderPicker Path="@_selectedLocalFolderPath" OnPickerClicked="ShowLocalFolderPickerModal" />
                    </div>
                </div>
            </div>
            
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary">Save changes</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="_localFolderPickerModal" Size="ModalSize.ExtraLarge" OnHidden="ShowCreateNewGameModal"/>

@code
{
    private Modal _createNewGameModal = default!;
    private Modal _localFolderPickerModal = default!;
    private string _selectedLocalFolderPath = "";


    private List<Game> _allGames = new();
    private List<Game> _filteredGames = new();
    private string _searchText = "";
    private Game? _selectedGame = new();
    private StorageAccount _selectedStorageAccount = new();
    private List<StorageAccount> _storageAccounts = new();

    protected override async Task OnInitializedAsync()
    {
        _storageAccounts = (await storageAccountRepository.GetAllStorageAccounts()).ToList();
        _allGames = (await gameRepository.GetAllGamesAsync()).ToList();
        _filteredGames = _allGames.ToList();
    }

    private void UpdateGames(string searchText)
    {
        _filteredGames = _allGames.Where(g => g.Name.Contains(searchText)).ToList();
    }

    private void GameCardClicked(Game g)
    {
        _selectedGame = g;
    }

    private async Task ShowCreateNewGameModal()
    {
        await _createNewGameModal.ShowAsync();
    }

    private async Task ShowLocalFolderPickerModal()
    {
        await _createNewGameModal.HideAsync();
        var parameters = new Dictionary<string, object>
        {
            { nameof(LocalFolderPickerModal.InitialPath), _selectedLocalFolderPath },
            {
                nameof(LocalFolderPickerModal.OnDirectorySelected),
                EventCallback.Factory.Create<string>(this, async (path) =>
                {
                    _selectedLocalFolderPath = path;
                    await _localFolderPickerModal.HideAsync();
                    await _createNewGameModal.ShowAsync();
                })
            },
        };
        await _localFolderPickerModal.ShowAsync<LocalFolderPickerModal>("Select Game Save Folder", parameters: parameters);
    }
}
